boxplot(m)
hist(m, main="Waiting minutes")
#Normality of the Data
par(mfrow=c(1,3))
hist(m, main="Waiting minutes")
qqnorm(m)
qqline(m, col = "steelblue", lwd = 2)
boxplot(m)
# sign test
sum(m>6)
# sign test
sum(m>15)
binom.test(m.s, m.n, p=0.5)
# sign test
m.s = sum(m<15)
binom.test(m.s, m.n, p=0.5)
# Wilcoxon signed rank test
wilcox.test(m, mu = m.s)
# Exercise 1.b
# t-test
t.test(m)
m.n = length(m)
n = ceiling((qnorm(0.985) * m.sd / ci) ^ 2)
n
m.n
m.mean
# Exercise 1.b
# t-test
t.test(m)
# sign test
m.s = sum(m>15)
binom.test(m.s, m.n, p=0.5)
# Wilcoxon signed rank test
wilcox.test(m, mu = m.s)
# power of the sign test at mean=14
m.s = sum(m>14)
binom.test(m.s, m.n, p=0.5)
# power of the sign test at mean=13
m.s = sum(m>13)
binom.test(m.s, m.n, p=0.5)
# sign test
m.s = sum(m>15)
# power of the sign test at mean=14
m.s = sum(m>14)
m.s
sum(m>13)
plot(m,dnorm(m), type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
dnorm(m)
axis(1, at = -3:3, labels = c("-3s", "-2s", "-1s", "mean", "1s", "2s", "3s"))
plot(dnorm(m))
# Exercise 1.b
# t-test
t.test(m, mu=15,alt="g")
# Exercise 1.c
# power of the t-test at mean=14 and mean=13
t.test(m, mu=14,alt="g")
t.test(m, mu=13,alt="g")
# power of the sign test at mean=14 and mean=13
binom.test(sum(m>14), m.n, p=0.5)
binom.test(sum(m>13), m.n, p=0.5)
## Exercise 1
**a)**
First we assign  the values to array:
`m = c(15.4, 17.9, 19.0, 0.5, 15.9, 2.7, 6.2, 2.5, 4.7, 6.9, 10.8, 24.3, 5.6, 23.0, 10.7)`
Then we calculate the mean `mean(m)`
knitr::opts_chunk$set(echo = TRUE)
m.ci = round(qnorm(0.985) * m.sd / sqrt(m.n), 3)
c(m.mean - m.ci, m.mean + m.ci)
c(2*m.mean-Tstar975, 2*m.mean-Tstar25)
c(round(2*m.mean-Tstar975,3), round(2*m.mean-Tstar25,3))
# Exercise 1.b
# t-test
t.test(m, mu=15, alt="l")
# Wilcoxon signed rank test
wilcox.test(m, mu = 15)
# Exercise 1.b
# t-test
t.test(m, mu=15, alt="l")
# Exercise 1.b
# t-test
t.test(m, mu=15)
# Exercise 1.b
# t-test
t.test(m, mu=15, alt="l")
source("~/.active-rstudio-document", echo=TRUE)
# Exercise 1.b
# t-test
t.test(m, mu=15, alt="l")
# Exercise 1.b
# t-test
t.test(m, mu=15)
# Wilcoxon signed rank test
wilcox.test(m, mu = 15)
# Exercise 1.b
# t-test
t.test(m, mu=15, alt="l")
# sign test for mean=15
binom.test(sum(m<15), m.n, p=0.5)
x=rnorm(m.n,mean=m.mean, sd=m.sd)
pttest[i]=t.test(x, mu=13, alt="l")[[3]]
psign[i]=binom.test(sum(x<13), m.n, p=0.5)[[3]]
}
sum(psign<0.05)/B
sum(pttest<0.05)/B
for(i in 1:B) {
x=rnorm(m.n,mean=m.mean, sd=m.sd)
pttest[i]=t.test(x, mu=13, alt="l")[[3]]
psign[i]=binom.test(sum(x<13), m.n, p=0.5)[[3]]
}
sum(psign<0.05)/B
sum(pttest<0.05)/B
psign=numeric(B)
pttest=numeric(B)
# mean=14
for(i in 1:B) {
x=rnorm(m.n,mean=m.mean, sd=m.sd)
pttest[i]=t.test(x, mu=14, alt="l")[[3]]
psign[i]=binom.test(sum(x<14), m.n, p=0.5)[[3]]
}
sum(psign<0.05)/B
sum(pttest<0.05)/B
# mean=13
for(i in 1:B) {
x=rnorm(m.n,mean=m.mean, sd=m.sd)
pttest[i]=t.test(x, mu=13, alt="l")[[3]]
psign[i]=binom.test(sum(x<13), m.n, p=0.5)[[3]]
}
sum(psign<0.05)/B
psign=numeric(B)
pttest=numeric(B)
# mean=14
for(i in 1:B) {
x=rnorm(m.n,mean=m.mean, sd=m.sd)
pttest[i]=t.test(x, mu=14, alt="l")[[3]]
psign[i]=binom.test(sum(x<14), m.n, p=0.5)[[3]]
}
sum(psign<0.05)/B
sum(pttest<0.05)/B
# mean=13
for(i in 1:B) {
x=rnorm(m.n,mean=m.mean, sd=m.sd)
pttest[i]=t.test(x, mu=13, alt="l")[[3]]
psign[i]=binom.test(sum(x<13), m.n, p=0.5)[[3]]
}
sum(psign<0.05)/B
sum(pttest<0.05)/B
prop.test(c(40,60),c(70,80))[3]
prop.test(c(4,6),c(7,8))[3]
prop.test(c(40,60),c(70,80))[3]
round(prop.test(c(4,6),c(7,8))[3],3)
prop.test(c(4,6),c(7,8))[3]
round(prop.test(c(40,60),c(70,80))[3],3)
source("~/.active-rstudio-document", echo=TRUE)
typeA = c(0.65, 0.26, 0.60, 0.27, 0.51, 0.33, 0.36, 0.44, 0.35, 0.17, 0.27, 0.26, 0.20, 0.08 )
typeB = c(0.43, 0.37, 0.47, 0.39, 0.36, 0.32, 0.44, 0.22, 0.83, 0.31)
t.test(typeA, typeB)
t.test(typeA, typeB, alt="less")
t.test(typeA, typeB, alt="g")
t.test(typeA, typeB, alt="l")
t.test(typeA, typeB)
mean(typeA)
mean(typeB)
t.test(typeA, typeB, alternative = "two.sided")
t.test(typeA, typeB, var.equal=FALSE)
t.test(typeA, typeB, var.equal=TRUE)
t.test(typeA, typeB)
?t.test
t.test(typeA, typeB, alt="g")
t.test(typeA, typeB, alt="l")
t.test(typeB, typeA, alt="l")
t.test(typeB, typeA)
t.test(typeB, typeA, alt="l")
t.test(typeB, typeA, alt="g")
boxplot(type A)
boxplot(typeA)
boxplot(typeB)
par(mfrow=c(1,2))
boxplot(typeA)
boxplot(typeB)
t.test(typeB, typeA)
threatA = c(0.48,0.21,0.40,0.25,0.44,0.23,0.27,0.37,0.28,0.13,0.21,0.17,0.14,0.05)
threatB= c(0.34,0.26,0.31,0.35,0.36,0.23,0.44,0.17,0.58,0.28)
t.test(threatA, threatB)
source("~/.active-rstudio-document")
t.test(x, y)
wilcox.test(x, y)
x=rnorm(24,mean=0.6, sd=0.51)
y=rnorm(24,mean=1.48, sd=0.73)
wilcox.test(x, y)
x=rnorm(4,mean=0.6, sd=0.51)
y=rnorm(4,mean=1.48, sd=0.73)
wilcox.test(x, y)
wilcox.test(x, y)
x=rnorm(4,mean=0.6, sd=0.51)
y=rnorm(4,mean=1.48, sd=0.73)
t.test(x, y)
wilcox.test(x, y)
x=rnorm(24,mean=0.6, sd=0.51)
y=rnorm(24,mean=1.48, sd=0.73)
t.test(x, y)
wilcox.test(x, y)
x=rnorm(14,mean=0.6, sd=0.51)
y=rnorm(14,mean=1.48, sd=0.73)
t.test(x, y)
wilcox.test(x, y)
t.test(x, y, alt='l')
t.test(x, y, alt='g')
wilcox.test(x, y, alt='l')
a=rnorm(14,mean=0.55, sd=0.25)
b=rnorm(14,mean=0.26, sd=0.144)
wilcox.test(a, b, alt='g')
a=rnorm(50,mean=0.55, sd=0.25)
b=rnorm(50,mean=0.26, sd=0.144)
wilcox.test(a, b, alt='g')
a=rnorm(1,mean=0.55, sd=0.25)
b=rnorm(1,mean=0.26, sd=0.144)
wilcox.test(a, b, alt='g')
a=rnorm(5,mean=0.55, sd=0.25)
b=rnorm(5,mean=0.26, sd=0.144)
wilcox.test(a, b, alt='g')
a=rnorm(6,mean=0.55, sd=0.25)
b=rnorm(6,mean=0.26, sd=0.144)
wilcox.test(a, b, alt='g')
a=rnorm(6,mean=0.5, sd=0.2)
b=rnorm(6,mean=0.48, sd=0.2)
wilcox.test(a, b, alt='g')
a=rnorm(6,mean=0.24, sd=0.064)
b=rnorm(6,mean=0.24, sd=0.064)
wilcox.test(a, b, alt='g')
a=rnorm(6,mean=0.24, sd=0.064)
b=rnorm(6,mean=0.24, sd=0.064)
wilcox.test(a, b, alt='g')
a=rnorm(6,mean=0.95, sd=0.068)
b=rnorm(6,mean=0.77, sd=0.068)
wilcox.test(a, b, alt='g')
a=rnorm(6,mean=0.95, sd=0.068)
b=rnorm(6,mean=0.77, sd=0.068)
wilcox.test(a, b, alt='g')
a=rnorm(6,mean=0.61, sd=0.317)
b=rnorm(6,mean=0.50, sd=0.256)
wilcox.test(a, b, alt='g')
a=rnorm(6,mean=0.95, sd=0.068)
b=rnorm(6,mean=0.77, sd=0.068)
wilcox.test(a, b, alt='g')
a=rnorm(6,mean=0.95, sd=0.068)
b=rnorm(6,mean=0.77, sd=0.068)
wilcox.test(a, b, alt='g')
a=rnorm(5,mean=0.95, sd=0.068)
b=rnorm(5,mean=0.77, sd=0.068)
wilcox.test(a, b, alt='g')
a=rnorm(5,mean=0.95, sd=0.068)
b=rnorm(5,mean=0.77, sd=0.068)
wilcox.test(a, b, alt='g')
attach(data)
plot(longitude, latitude, col=2, pch=20, cex=0.5, ylim=c(0,60), xlim=c(-100,10))
library(rworldmap)
plot(getMap(), asp = 1, add=T, col="gray60")
getwd()
data <- read.csv("/Users/asror_akb/Downloads/tritium.csv")
attach(data)
plot(longitude, latitude, col=2, pch=20, cex=0.5, ylim=c(0,60), xlim=c(-100,10))
library(rworldmap)
plot(getMap(), asp = 1, add=T, col="gray60")
library(rworldmap)
install.packages("rworldmap")
library(rworldmap)
plot(getMap(), asp = 1, add=T, col="gray60")
data <- read.csv("/Users/asror_akb/Downloads/tritium.csv")
attach(data)
plot(longitude, latitude, col=2, pch=20, cex=0.5, ylim=c(0,60), xlim=c(-100,10))
library(rworldmap)
plot(getMap(), asp = 1, add=T, col="gray60")
lm2$coefficients[1]\
lm2$coefficients[1]\
x<-pressure
y<-tritium
NW_CV <- function(x,y,h){
n <- length(x)
mcv <- rep(0,n)
for(i in 1:n){
mcv[i] <- ksmooth(x[-i], y[-i], kernel="normal",
bandwidth=h, x.points=x[i])$y
}
cv <- mean((y-mcv)^2)
return(cv)
}
min_h <- optim(par=0.3, fn=function(h) NW_CV(x,y,h), method="BFGS")
(h_cv <- min_h$par)
min_h$value
xval <- seq(min(x),max(x))
llest <- rep(NA, length(xval))
m_d <- rep(NA, length(xval))
h <- 0.176
for(i in 1:length(xval)){
z <- x-xval[i]
w <- dnorm((xval[i]-x)/h)
z2 <- z^2
wls <- lm(y~z  , weights = w)
m_d[i] <- wls$coef[2]*z
#llest[i] <- predict(wls,z)
llest[i] <- wls$coef[1]
}
plot(x,y, xlab="pressure", ylab="tritium")
points(xval,llest,type = "l",col=2,lwd=2)
points(xval,m_d,type = "l",col=3)
wls$coef[2]
wls$coef[1]
install.packages("interp")
?(locpoly)
loclinear2 <- locpoly(tritium,pressure,bandwidth = h_cv, degree = 2 )
lm2<- lm(tritium~pressure)
lm2
lm2$coefficients[1]\
points(xval,m_d,type = "l",col=3)
wls$coef[2]
wls$coef[1]
install.packages("interp")
?(locpoly)
loclinear2 <- locpoly(tritium,pressure,bandwidth = h_cv, degree = 2 )
lm2<- lm(tritium~pressure)
loclinear2 <- locpoly(tritium,pressure,bandwidth = h_cv, degree = 2 )
lm2<- lm(tritium~pressure)
lm2
for(i in 1:length(xval)){
z <- x-xval[i]
w <- dnorm((xval[i]-x)/h)
z2 <- z^2
wls <- lm(y~z  , weights = w)
m_d[i] <- wls$coef[2]*z
llest[i] <- predict(wls,z)
#llest[i] <- wls$coef[1]
}
plot(x,y, xlab="pressure", ylab="tritium")
points(xval,llest,type = "l",col=2,lwd=2)
points(xval,m_d,type = "l",col=3)
wls$coef[2]
xval <- seq(min(x),max(x))
llest <- rep(NA, length(xval))
m_d <- rep(NA, length(xval))
h <- 0.176
for(i in 1:length(xval)){
z <- x-xval[i]
w <- dnorm((xval[i]-x)/h)
wls <- lm(y~z, weights = w)
m_d[i] <- wls$coef[2]*z
#llest[i] <- wls$coef[1]
llest[i] <- predict(wls$coef[1])
}
plot(x,y, xlab="pressure", ylab="tritium")
points(xval,llest,type = "l",col=2,lwd=2)
points(xval,m_d,type = "l",col=3)
x<-pressure
y<-tritium
xval <- seq(min(x),max(x))
llest <- rep(NA, length(xval))
m_d <- rep(NA, length(xval))
h <- 0.176
for(i in 1:length(xval)){
z <- x-xval[i]
w <- dnorm((xval[i]-x)/h)
wls <- lm(y~z, weights = w)
m_d[i] <- wls$coef[2]*z
#llest[i] <- wls$coef[1]
llest[i] <- predict(wls$coef[1])
}
plot(x,y, xlab="pressure", ylab="tritium")
points(xval,llest,type = "l",col=2,lwd=2)
points(xval,m_d,type = "l",col=3)
set.seed(1)
n <- 101
x<-pressure
y<-tritium
fx <- sin(2 * pi * x)
# define x* and color for window
xstar <- 0.3
cols <- rgb(190/255,190/255,190/255,alpha=0.5)
# set-up 2 x 2 subplot
par(mfrow = c(2,2))
# loop through spans (0.1, 0.2, 0.3, 0.4)
for(s in c(0.1, 0.2, 0.3, 0.4)){
# plot data and true function
plot(x, y, main = paste0("span = ", s), ylim = c(-2.5, 2.5),
cex.lab = 1.5, cex.axis = 1.25)
lines(x, fx, col = "blue", lwd = 2)
# plot window
window <- c(xstar - s / 2, xstar + s / 2)
rect(window[1], -3, window[2], 3, col = cols)
# define weights
w <- tricube(x - xstar, delta = s / 2)
# plot estimate
X <- cbind(1, x - 0.5, (x - 0.5)^2)
X.w <- sqrt(w) * X
y.w <- sqrt(w) * y
beta <- solve(crossprod(X.w)) %*% crossprod(X.w, y.w)
ystar <- as.numeric(cbind(1, xstar - 0.5, (xstar - 0.5)^2) %*% beta)
points(xstar, ystar, pch = 17, col = "red", cex = 1)
# add regression line
lines(x, X %*% beta, lty = 3)
# add legend
legend("topright", legend = c("data", "truth"),
pch = c(1, NA), lty = c(NA, 1), col = c("black", "blue"), bty = "n")
legend("bottomright", legend = c("estimate", "window"),
pch = c(17, 15), col = c("red", "gray"), bty = "n")
}
# define function and data
set.seed(1)
n <- 101
x <- seq(0, 1, length.out = n)
fx <- sin(2 * pi * x)
y <- fx + rnorm(n, sd = 0.5)
# define x* and color for window
xstar <- 0.3
cols <- rgb(190/255,190/255,190/255,alpha=0.5)
# set-up 2 x 2 subplot
par(mfrow = c(2,2))
# loop through spans (0.1, 0.2, 0.3, 0.4)
for(s in c(0.1, 0.2, 0.3, 0.4)){
# plot data and true function
plot(x, y, main = paste0("span = ", s), ylim = c(-2.5, 2.5),
cex.lab = 1.5, cex.axis = 1.25)
lines(x, fx, col = "blue", lwd = 2)
# plot window
window <- c(xstar - s / 2, xstar + s / 2)
rect(window[1], -3, window[2], 3, col = cols)
# define weights
w <- tricube(x - xstar, delta = s / 2)
# plot estimate
X <- cbind(1, x - 0.5, (x - 0.5)^2)
X.w <- sqrt(w) * X
y.w <- sqrt(w) * y
beta <- solve(crossprod(X.w)) %*% crossprod(X.w, y.w)
ystar <- as.numeric(cbind(1, xstar - 0.5, (xstar - 0.5)^2) %*% beta)
points(xstar, ystar, pch = 17, col = "red", cex = 1)
# add regression line
lines(x, X %*% beta, lty = 3)
# add legend
legend("topright", legend = c("data", "truth"),
pch = c(1, NA), lty = c(NA, 1), col = c("black", "blue"), bty = "n")
legend("bottomright", legend = c("estimate", "window"),
pch = c(17, 15), col = c("red", "gray"), bty = "n")
}
set.seed(1)
n <- 101
x<-pressure
y<-tritium
fx <- sin(2 * pi * x)
# define x* and color for window
xstar <- 0.3
cols <- rgb(190/255,190/255,190/255,alpha=0.5)
# set-up 2 x 2 subplot
par(mfrow = c(2,2))
# loop through spans (0.1, 0.2, 0.3, 0.4)
for(s in c(0.1, 0.2, 0.3, 0.4)){
# plot data and true function
plot(x, y, main = paste0("span = ", s), ylim = c(-2.5, 2.5),
cex.lab = 1.5, cex.axis = 1.25)
lines(x, fx, col = "blue", lwd = 2)
# plot window
window <- c(xstar - s / 2, xstar + s / 2)
rect(window[1], -3, window[2], 3, col = cols)
# define weights
w <- tricube(x - xstar, delta = s / 2)
# plot estimate
X <- cbind(1, x - 0.5, (x - 0.5)^2)
X.w <- sqrt(w) * X
y.w <- sqrt(w) * y
beta <- solve(crossprod(X.w)) %*% crossprod(X.w, y.w)
ystar <- as.numeric(cbind(1, xstar - 0.5, (xstar - 0.5)^2) %*% beta)
points(xstar, ystar, pch = 17, col = "red", cex = 1)
# add regression line
lines(x, X %*% beta, lty = 3)
# add legend
legend("topright", legend = c("data", "truth"),
pch = c(1, NA), lty = c(NA, 1), col = c("black", "blue"), bty = "n")
legend("bottomright", legend = c("estimate", "window"),
pch = c(17, 15), col = c("red", "gray"), bty = "n")
}
cv.ridge <- cv.glmnet(Xs, y, alpha = 0, nfolds=n, grouped=FALSE, family = binomial)
library(glmnet)
X <- as.matrix(wine_data[,-12])
clear
# At last print the output dataframe
print(m1_generation_chatgpt_data)
source("~/VU/Master/GL/Green-Code-Guardians/data/results.R")
# Then we have to load JSON data
m1_generation_chatgpt_data <- fromJSON("chatgpt/m1-generation-chatgpt-formated.json")
# Then convert  the JSON data to dataframe
m1_generation_chatgpt_dataframe <- as.data.frame(m1_generation_chatgpt_data)
source("~/VU/Master/GL/Green-Code-Guardians/data/results.R")
source("~/VU/Master/GL/Green-Code-Guardians/data/results.R")
source("~/VU/Master/GL/Green-Code-Guardians/data/results.R")
source("~/VU/Master/GL/Green-Code-Guardians/data/results.R")
source("~/VU/Master/GL/Green-Code-Guardians/data/results.R")
source("~/VU/Master/GL/Green-Code-Guardians/data/results.R")
source("~/VU/Master/GL/Green-Code-Guardians/data/chatgpt/results.R")
source("~/VU/Master/GL/Green-Code-Guardians/data/chatgpt/results.R")
source("~/VU/Master/GL/Green-Code-Guardians/data/chatgpt/results.R")
source("~/VU/Master/GL/Green-Code-Guardians/data/chatgpt/results.R")
ls
clear
setwd("~/VU/Master/GL/Green-Code-Guardians/data/chatgpt")
setwd("~/VU/Master/GL/Green-Code-Guardians/data/chatgpt")
source("~/VU/Master/GL/Green-Code-Guardians/data/chatgpt/results.R")
source("~/VU/Master/GL/Green-Code-Guardians/data/chatgpt/results.R")
view(m1_generation_chatgpt_data)
source("~/VU/Master/GL/Green-Code-Guardians/data/chatgpt/results.R")
save(m1_generation_chatgpt_data, file = 'm1_generation_chatgpt.Rdata')
# At last print the output dataframe
#print(m1_generation_chatgpt_data)
load('m1_generation_chatgpt.Rdata')
print(m1_generation_chatgpt)
view('m1_generation_chatgpt.Rdata')
