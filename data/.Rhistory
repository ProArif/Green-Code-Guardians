library(jsonlite)
load("~/Documents/Green Lab/data/linux-generation-chatgpt.json")
help("install.packages")
install.packages("rjson")
library(rjson)
myData <- fromJSON(file="/data/linux-generation-chatgpt.json")
myData <- fromJSON(file="./data/linux-generation-chatgpt.json")
myData <- fromJSON(file=".\data\linux-generation-chatgpt.json")
myData <- fromJSON(file="data/linux-generation-chatgpt.json")
installed.packages("rjson")
# Read the JSON data from a file
json_data <- fromJSON("linux-generation-chatgpt.json")
# Read the JSON data from a file
json_data <- fromJSON("linux-real-chatgpt.json")
detach("package:rjson", unload = TRUE)
library(jsonlite)
library(dplyr)
# Read the JSON data from a file
json_data <- fromJSON("linux-real-chatgpt.json")
# Read the JSON data from a file
json_data <- fromJSON(file="linux-real-chatgpt.json")
detach("package:jsonlite", unload = TRUE)
library(rjson)
library(dplyr)
# Read the JSON data from a file
json_file <- "linux-real-chatgpt.json"
json_data <- fromJSON(json_file)
# Read the JSON data from a file
json_file <- "linux-generation-chatgpt.json"
json_data <- fromJSON(file = json_file)
load("~/Documents/Green Lab/Green-Code-Guardians/data/.RData")
# Linux-Knowledge
boxplot(list(df_linux_knowledge_chatgpt$power,
df_linux_knowledge_bard$power,
df_linux_knowledge_llama$power),
main="Linux-Knowledge", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Boxplot: Linux-Generation
boxplot(list(df_linux_generation_chatgpt$power,
df_linux_generation_bard$power,
df_linux_generation_llama$power),
main="Linux-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power"
)
# Linux-Real
boxplot(list(df_linux_real_chatgpt$power,
df_linux_real_bard$power,
df_linux_real_llama$power),
main="Linux-Real", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# M2-Generation
boxplot(list(df_m2_generation_chatgpt$power,
df_m2_generation_bard$power,
df_m2_generation_llama$power),
main="M2-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# M2-Generation
boxplot(list(df_m2_generation_chatgpt$power,
df_m2_generation_bard$power,
df_m2_generation_llama$power),
main="M2-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# M2-Knowledge
boxplot(list(df_m2_knowledge_chatgpt$power,
df_m2_knowledge_bard$power,
df_m2_knowledge_llama$power),
main="M2-Knowledge", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# M2-Real
boxplot(list(df_m2_real_chatgpt$power,
df_m2_real_bard$power,
df_m2_real_llama$power),
main="M2-Real", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Windows-Generation
boxplot(list(df_windows_generation_chatgpt$power,
df_windows_generation_bard$power,
df_windows_generation_llama$power),
main="Windows-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Windows-Knowledge
boxplot(list(df_windows_knowledge_chatgpt$power,
df_windows_knowledge_bard$power,
df_windows_knowledge_llama$power),
main="Windows-Knowledge", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Windows-Real
boxplot(list(df_windows_real_chatgpt$power,
df_windows_real_bard$power,
df_windows_real_llama$power),
main="Windows-Real", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save image
png("../figures/linux-real-boxplot.jpeg")
# Windows-Generation
boxplot(list(df_windows_generation_chatgpt$power,
df_windows_generation_bard$power,
df_windows_generation_llama$power),
main="Windows-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Violin plot of interesting
ggplot(list(df_windows_real_chatgpt$power,
df_windows_real_bard$power,
df_windows_real_llama$power), aes(x = "Linux Generation", y = power)) +
geom_violin() +
ylab("Power") +
xlab("Linux")
library(tidyverse)
library(ggplot2)
# Violin plot of interesting
ggplot(list(df_windows_real_chatgpt$power,
df_windows_real_bard$power,
df_windows_real_llama$power), aes(x = "Linux Generation", y = power)) +
geom_violin() +
ylab("Power") +
xlab("Linux")
# Violin plot of interesting
ggplot(data.frame(list(df_windows_real_chatgpt$power,
df_windows_real_bard$power,
df_windows_real_llama$power)), aes(x = "Linux Generation", y = power)) +
geom_violin() +
ylab("Power") +
xlab("Linux")
# Violin Plots
ggplot(
data.frame(
group = c(rep("ChatGPT", length(df_windows_real_chatgpt$power)),
rep("Bard", length(df_windows_real_bard$power)),
rep("Llama", length(df_windows_real_llama$power))),
power = c(df_windows_real_chatgpt$power,
df_windows_real_bard$power,
df_windows_real_llama$power)
), aes(x = group, y = power, fill = group)) +
geom_violin() +
labs(title = "Violin Plot of Power Data",
x = "Group",
y = "Power") +
scale_fill_manual(values = c("ChatGPT" = "red", "Bard" = "blue", "Llama" = "green")) +
theme_minimal()
# Violin Plots
ggplot(
data.frame(
group = c(rep("ChatGPT", length(df_windows_real_chatgpt$power)),
rep("Bard", length(df_windows_real_bard$power)),
rep("Llama", length(df_windows_real_llama$power))),
power = c(df_windows_real_chatgpt$power,
df_windows_real_bard$power,
df_windows_real_llama$power)
), aes(x = group, y = power, fill = group)) +
geom_violin() +
labs(title = "Violin Plot of Power Data",
x = "Group",
y = "Power") +
scale_fill_manual(values = c("ChatGPT" = "red", "Bard" = "blue", "Llama" = "green")) +
theme_minimal()
setwd("~/Documents/Green Lab/Green-Code-Guardians/data")
# Load the necessary libraries
library(tidyverse)
library(dplyr)
library(ggplot2)
# Define the factors
prompt_type <- c('generation', 'knowledge', 'real')
machine <- c('linux', 'm2', 'm1', 'windows')
llm <- c('chatgpt', 'bard', 'llama2')
# Function processes data: CPU Utilization
process_data_cpu <- function(filename, machine, promptType, llm) {
load(filename)
# calling data.frame to collapse the time and count vectors.
df <- data.frame(
power = new_data_df$cpu.usage,
machine = factor(rep(machine, nrow(new_data_df))),
promptType = factor(rep(promptType, nrow(new_data_df))),
llm = factor(rep(llm, nrow(new_data_df)))
)
colnames(df) = c('power', 'machine', 'prompt', 'llm')
return(df)
}
# Load and process CPU Utilization data
df_linux_generation_chatgpt <- process_data_cpu("formatted-data/RData/linux-generation-chatgpt.Rdata", 'linux', 'generation', 'chatgpt')
df_linux_knowledge_chatgpt <- process_data_cpu("formatted-data/RData/linux-knowledge-chatgpt.Rdata", 'linux', 'knowledge', 'chatgpt')
# Function processes data: Power Utilization (as Linux does not have power utilization)
process_data_power <- function(filename, machine, promptType, llm) {
load(filename)
# calling data.frame to collapse the time and count vectors.
df <- data.frame(
power = new_data_df$power.usage,
machine = factor(rep(machine, nrow(new_data_df))),
promptType = factor(rep(promptType, nrow(new_data_df))),
llm = factor(rep(llm, nrow(new_data_df)))
)
colnames(df) = c('power', 'machine', 'prompt', 'llm')
return(df)
}
# Load dataframes for Power Utilization
power_df_m2_generation_chatgpt <- process_data_power("formatted-data/RData/m2-generation-chatgpt.Rdata", 'm2', 'generation', 'chatgpt')
power_df_m2_knowledge_chatgpt <- process_data_power("formatted-data/RData/m2-knowledge-chatgpt.Rdata", 'm2', 'knowledge', 'chatgpt')
power_df_m2_real_chatgpt <- process_data_power("formatted-data/RData/m2-realworld-chatgpt.Rdata", 'm2', 'real', 'chatgpt')
power_df_m2_generation_bard <- process_data_power("formatted-data/RData/m2-generation-bard.Rdata", 'm2', 'generation', 'bard')
power_df_m2_knowledge_bard <- process_data_power("formatted-data/RData/m2-knowledge-bard.Rdata", 'm2', 'knowledge', 'bard')
power_df_m2_real_bard <- process_data_power("formatted-data/RData/m2-realworld-bard.Rdata", 'm2', 'real', 'bard')
power_df_m2_generation_llama <- process_data_power("formatted-data/RData/m2-generation-llama.Rdata", 'm2', 'generation', 'llama')
power_df_m2_knowledge_llama <- process_data_power("formatted-data/RData/m2-knowledge-llama.Rdata", 'm2', 'knowledge', 'llama')
power_df_m2_real_llama <- process_data_power("formatted-data/RData/m2-realworld-llama.Rdata", 'm2', 'real', 'llama')
power_df_windows_generation_chatgpt <- process_data_power("formatted-data/RData/windows11-generation-chatgpt.Rdata", 'windows', 'generation', 'chatgpt')
power_df_windows_knowledge_chatgpt <- process_data_power("formatted-data/RData/windows11-knowledge-chatgpt.Rdata", 'windows', 'knowledge', 'chatgpt')
power_df_windows_real_chatgpt <- process_data_power("formatted-data/RData/windows11-realworld-chatgpt.Rdata", 'windows', 'real', 'chatgpt')
power_df_windows_generation_bard <- process_data_power("formatted-data/RData/windows11-generation-bard.Rdata", 'windows', 'generation', 'bard')
power_df_windows_knowledge_bard <- process_data_power("formatted-data/RData/windows11-knowledge-bard.Rdata", 'windows', 'knowledge', 'bard')
power_df_windows_real_bard <- process_data_power("formatted-data/RData/windows11-realworld-bard.Rdata", 'windows', 'real', 'bard')
power_df_windows_generation_llama <- process_data_power("formatted-data/RData/windows11-generation-llama.Rdata", 'windows', 'generation', 'llama')
power_df_windows_knowledge_llama <- process_data_power("formatted-data/RData/windows11-knowledge-llama.Rdata", 'windows', 'knowledge', 'llama')
power_df_windows_real_llama <- process_data_power("formatted-data/RData/windows11-realworld-llama.Rdata", 'windows', 'real', 'llama')
power_df_m1_generation_chatgpt <- process_data_power("formatted-data/RData/m1-generation-chatgpt.Rdata", 'm1', 'generation', 'chatgpt')
power_df_m1_knowledge_chatgpt <- process_data_power("formatted-data/RData/m1-knowledge-chatgpt.Rdata", 'm1', 'knowledge', 'chatgpt')
power_df_m1_real_chatgpt <- process_data_power("formatted-data/RData/m1-realworld-chatgpt.Rdata", 'm1', 'real', 'chatgpt')
power_df_m1_generation_bard <- process_data_power("formatted-data/RData/m1-generation-bard.Rdata", 'm1', 'generation', 'bard')
power_df_m1_knowledge_bard <- process_data_power("formatted-data/RData/m1-knowledge-bard.Rdata", 'm1', 'knowledge', 'bard')
power_df_m1_real_bard <- process_data_power("formatted-data/RData/m1-realworld-bard.Rdata", 'm1', 'real', 'bard')
power_df_m1_generation_llama <- process_data_power("formatted-data/RData/m1-generation-llama.Rdata", 'm1', 'generation', 'llama')
power_df_m1_knowledge_llama <- process_data_power("formatted-data/RData/m1-knowledge-llama.Rdata", 'm1', 'knowledge', 'llama')
power_df_m1_real_llama <- process_data_power("formatted-data/RData/m1-realworld-llama.Rdata", 'm1', 'real', 'llama')
# Function removes outlier by IQR rule
remove_outliers <- function(df) {
q1 <- quantile(df[['power']], 0.25)
q3 <- quantile(df[['power']], 0.75)
iqr <- q3 - q1
lower_threshold <- q1 - 1.5 * iqr
upper_threshold <- q3 + 1.5 * iqr
df_filtered <- df[df[['power']] >= lower_threshold & df[['power']] <= upper_threshold, ]
return(df_filtered)
}
# Power Utilization
power_df_m1_generation_bard <- remove_outliers(power_power_df_m1_generation_bard)
power_df_m2_knowledge_chatgpt <- remove_outliers(power_df_m2_knowledge_chatgpt)
power_df_m2_real_chatgpt <- remove_outliers(power_df_m2_real_chatgpt)
power_df_m2_generation_bard <- remove_outliers(power_df_m2_generation_bard)
power_df_m2_knowledge_bard <- remove_outliers(power_df_m2_knowledge_bard)
power_df_m2_real_bard <- remove_outliers(power_df_m2_real_bard)
power_df_m2_generation_llama <- remove_outliers(power_df_m2_generation_llama)
power_df_m2_knowledge_llama <- remove_outliers(power_df_m2_knowledge_llama)
power_df_m2_real_llama <- remove_outliers(power_df_m2_real_llama)
power_df_windows_gneration_chatgpt <- remove_outliers(power_df_windows_generation_chatgpt)
power_df_windows_knowledge_chatgpt <- remove_outliers(power_df_windows_knowledge_chatgpt)
power_df_windows_real_chatgpt <- remove_outliers(power_df_windows_real_chatgpt)
power_df_windows_generation_bard <- remove_outliers(power_df_windows_generation_bard)
power_df_windows_knowledge_bard <- remove_outliers(power_df_windows_knowledge_bard)
power_df_windows_real_bard <- remove_outliers(power_df_windows_real_bard)
power_df_windows_generation_llama <- remove_outliers(power_df_windows_generation_llama)
power_df_windows_knowledge_llama <- remove_outliers(power_df_windows_knowledge_llama)
power_df_windows_real_llama <- remove_outliers(power_df_windows_real_llama)
power_df_m1_generation_chatgpt <- remove_outliers(power_df_m1_generation_chatgpt)
power_df_m1_knowledge_chatgpt <- remove_outliers(power_df_m1_knowledge_chatgpt)
power_df_m1_real_chatgpt <- remove_outliers(power_df_m1_real_chatgpt)
power_df_m1_generation_bard <- remove_outliers(power_df_m1_generation_bard)
power_df_m1_knowledge_bard <- remove_outliers(power_df_m1_knowledge_bard)
power_df_m1_real_bard <- remove_outliers(power_df_m1_real_bard)
power_df_m1_generation_llama <- remove_outliers(power_df_m1_generation_llama)
power_df_m1_knowledge_llama <- remove_outliers(power_df_m1_knowledge_llama)
power_df_m1_real_llama <- remove_outliers(power_df_m1_real_llama)
# Scatterplot of power utilization
combined_power_df <- bind_rows(
power_df_m2_generation_bard,
power_df_m2_generation_chatgpt,
power_df_m2_generation_llama,
power_df_m2_knowledge_bard,
power_df_m2_knowledge_chatgpt,
power_df_m2_knowledge_llama,
power_df_m2_real_bard,
power_df_m2_real_chatgpt,
power_df_m2_real_llama,
power_df_windows_generation_bard,
power_df_windows_generation_chatgpt,
power_df_windows_generation_llama,
power_df_windows_knowledge_bard,
power_df_windows_knowledge_chatgpt,
power_df_windows_knowledge_llama,
power_df_windows_real_bard,
power_df_windows_real_chatgpt,
power_df_windows_real_llama,
power_df_m1_generation_bard,
power_df_m1_generation_chatgpt,
power_df_m1_generation_llama,
power_df_m1_knowledge_bard,
power_df_m1_knowledge_chatgpt,
power_df_m1_knowledge_llama,
power_df_m1_real_bard,
power_df_m1_real_chatgpt,
power_df_m1_real_llama
)
# grouping
power_scatter_plot_all <- combined_power_df %>%
group_by(llm, machine) %>%
summarise(mean_power = mean(power, na.rm = TRUE))
# Plotting the filtered data
ggplot(apple_power_scatter, aes(x=llm, y=mean_power, color=machine)) +
geom_point(size=3) +
labs(title="Scatterplot of Power Utilization Llm vs. Mean Power (M1 and M2)",
x="Chatbot",
y="Mean Power",
color="Machine") +
theme_minimal()
# Grouping only on Apple machines
apple_power_scatter <- power_scatter_plot_all %>% filter(machine %in% c("m1", "m2"))
# Plotting the filtered data
ggplot(apple_power_scatter, aes(x=llm, y=mean_power, color=machine)) +
geom_point(size=3) +
labs(title="Scatterplot of Power Utilization Llm vs. Mean Power (M1 and M2)",
x="Chatbot",
y="Mean Power",
color="Machine") +
theme_minimal()
ggsave("visualization/scatter-power-apple.png", width = 8, height = 6, units = "in")
dev.off()
# Mean power vs machine type (Interaction type) (M1 and M2)
apple_power_machine_scatter <- power_scatter_machine %>% filter(machine %in% c("m1", "m2"))
# Mean power vs machine type (Interaction type): Power Utilization
power_scatter_machine <- combined_power_df %>%
group_by(prompt, machine) %>%
summarise(mean_power = mean(power, na.rm = TRUE))
# Plotting the filtered data
ggplot(apple_power_machine_scatter, aes(x=machine, y=mean_power, color=prompt)) +
geom_point(size=3) +
labs(title="Scatterplot of CPU Utilization for Task Interactions(M1 and M2)",
x="Machine",
y="Mean Power",
color="Task Interaction") +
theme_minimal()
# Mean power vs machine type (Interaction type) (M1 and M2)
apple_power_machine_scatter <- power_scatter_machine %>% filter(machine %in% c("m1", "m2"))
# Plotting the filtered data
ggplot(apple_power_machine_scatter, aes(x=machine, y=mean_power, color=prompt)) +
geom_point(size=3) +
labs(title="Scatterplot of CPU Utilization for Task Interactions(M1 and M2)",
x="Machine",
y="Mean Power",
color="Task Interaction") +
theme_minimal()
# Plotting the filtered data
ggplot(apple_power_machine_scatter, aes(x=machine, y=mean_power, color=prompt)) +
geom_point(size=3) +
labs(title="Scatterplot of Power Utilization for Task Interactions(M1 and M2)",
x="Machine",
y="Mean Power",
color="Task Interaction") +
theme_minimal()
ggsave("visualization/scatter-power-machine-task-apploe.png", width = 8, height = 6, units = "in")
dev.off()
