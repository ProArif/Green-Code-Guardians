df_m2_gneration_chatgpt <- remove_outliers(df_m2_generation_chatgpt)
df_m2_knowledge_chatgpt <- remove_outliers(df_m2_knowledge_chatgpt)
df_m2_real_chatgpt <- remove_outliers(df_m2_real_chatgpt)
df_m2_generation_bard <- remove_outliers(df_m2_generation_bard)
df_m2_knowledge_bard <- remove_outliers(df_m2_knowledge_bard)
df_m2_real_bard <- remove_outliers(df_m2_real_bard)
df_m2_generation_llama <- remove_outliers(df_m2_generation_llama)
df_m2_knowledge_llama <- remove_outliers(df_m2_knowledge_llama)
df_m2_real_llama <- remove_outliers(df_m2_real_llama)
df_windows_gneration_chatgpt <- remove_outliers(df_windows_generation_chatgpt)
df_windows_knowledge_chatgpt <- remove_outliers(df_windows_knowledge_chatgpt)
df_windows_real_chatgpt <- remove_outliers(df_windows_real_chatgpt)
df_windows_generation_bard <- remove_outliers(df_windows_generation_bard)
df_windows_knowledge_bard <- remove_outliers(df_windows_knowledge_bard)
df_windows_real_bard <- remove_outliers(df_windows_real_bard)
df_windows_generation_llama <- remove_outliers(df_windows_generation_llama)
df_windows_knowledge_llama <- remove_outliers(df_windows_knowledge_llama)
df_windows_real_llama <- remove_outliers(df_windows_real_llama)
# Plotting
# Example: Boxplot for Linux-Generation
boxplot(df_linux_generation_chatgpt$power, main="Linux-Generation", ylab="Power")
hist(df_linux_generation_chatgpt$power, main="Histogram of Power Usage", xlab="Power Usage", ylab="Frequency", col="skyblue", border="black")
# You can create similar plots for other dataframes.
boxplot(df_m2_real_llama$power, main="M2-Real World", ylab="Power")
# Save the boxplot as a PNG file
png("visualization/linux-generation-boxplot.png")
boxplot(df_linux_generation_chatgpt$power, main="Linux-Generation", ylab="Power")
dev.off()  # Close the PNG device
# Create the boxplot
boxplot(list(df_linux_generation_chatgpt$power,
df_linux_generation_bard$power,
df_linux_generation_llama$power),
main="Linux-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power"
)
# Save the boxplot as a PNG file
png("figures/linux-generation-boxplot.png")
# Close the PNG device
dev.off()
# Additional plots (modify as needed)
ggplot(df_linux_generation_chatgpt, aes(x = llm, y = power)) +
geom_point(aes(color = llm), size = 3) +
geom_text(aes(label = llm), vjust = 1.5, hjust = 1.5) +
labs(title = "Average power of LLM interaction per LLM by operating system.",
x = "Machine Type",
y = "Power Usage (Watts)") +
theme_minimal()
# Create the boxplot
boxplot(list(df_linux_generation_chatgpt$power,
df_linux_generation_bard$power,
df_linux_generation_llama$power),
main="Linux-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power"
)
# Save the boxplot as a PNG file
png("visualization/linux-generation-boxplot.png")
# Close the PNG device
dev.off()
# Linux-Knowledge
boxplot(list(df_linux_knowledge_chatgpt$power,
df_linux_knowledge_bard$power,
df_linux_knowledge_llama$power),
main="Linux-Knowledge", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("visualization/linux-generation-boxplot.png")
# Close the PNG device
dev.off()
# Linux-Knowledge
boxplot(list(df_linux_knowledge_chatgpt$power,
df_linux_knowledge_bard$power,
df_linux_knowledge_llama$power),
main="Linux-Knowledge", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("visualization/linux-knowledge-boxplot.png")
# Close the PNG device
dev.off()
# Install the required packages (if not already installed)
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
# Load the necessary libraries
library(tidyverse)
# Function to process data
process_data <- function(filename, machine, promptType, llm) {
load(filename)
sample <- counter_data$sampleGroups[[1]]$samples
colnames(sample)[colnames(sample) == "count"] <- "powerUsage"
# Create a data frame
df <- data.frame(
time = sample$time,
power = sample$powerUsage,
machine = factor(rep(machine, length(sample$time))),
promptType = factor(rep(promptType, length(sample$time))),
llm = factor(rep(llm, length(sample$time)))
)
# Rename columns
colnames(df) <- c('time', 'power', 'machine', 'prompt', 'llm')
return(df)
}
# Load and process the data
df_linux_generation_chatgpt <- process_data("chatgpt/linux-generation-chatgpt.RData", 'linux', 'generation', 'chatgpt')
df_linux_knowledge_chatgpt <- process_data("chatgpt/linux-knowledge-chatgpt.RData", 'linux', 'knowledge', 'chatgpt')
df_linux_real_chatgpt <- process_data("chatgpt/linux-real-chatgpt.RData", 'linux', 'real', 'chatgpt')
df_linux_generation_bard <- process_data("bard/linux-generation-bard.RData", 'linux', 'generation', 'bard')
df_linux_knowledge_bard <- process_data("bard/linux-knowledge-bard.RData", 'linux', 'knowledge', 'bard')
df_linux_real_bard <- process_data("bard/linux-real-bard.RData", 'linux', 'real', 'bard')
df_linux_generation_llama <- process_data("llama/linux-generation-llama.RData", 'linux', 'generation', 'llama')
df_linux_knowledge_llama <- process_data("llama/linux-knowledge-llama.RData", 'linux', 'knowledge', 'llama')
df_linux_real_llama <- process_data("llama/linux-real-llama.RData", 'linux', 'real', 'llama')
df_m2_generation_chatgpt <- process_data("chatgpt/m2-generation-chatGPT.RData", 'm2', 'generation', 'chatgpt')
df_m2_knowledge_chatgpt <- process_data("chatgpt/m2-knowledge-chatGPT.RData", 'm2', 'knowledge', 'chatgpt')
df_m2_real_chatgpt <- process_data("chatgpt/m2-realWorld-chatGPT.RData", 'm2', 'real', 'chatgpt')
df_m2_generation_bard <- process_data("bard/m2-generation-bard.RData", 'm2', 'generation', 'bard')
df_m2_knowledge_bard <- process_data("bard/m2-knowledge-bard.RData", 'm2', 'knowledge', 'bard')
df_m2_real_bard <- process_data("bard/m2-realWorld-bard.RData", 'm2', 'real', 'bard')
df_m2_generation_llama <- process_data("llama/m2-generation-llama2.RData", 'm2', 'generation', 'llama')
df_m2_knowledge_llama <- process_data("llama/m2-knowledge-llama2.RData", 'm2', 'knowledge', 'llama')
df_m2_real_llama <- process_data("llama/m2-realworld-llama2.RData", 'm2', 'real', 'llama')
df_windows_generation_chatgpt <- process_data("chatgpt/windows11-generation-chatgpt.RData", 'windows', 'generation', 'chatgpt')
df_windows_knowledge_chatgpt <- process_data("chatgpt/windows11-knowledge-chatgpt.RData", 'windows', 'knowledge', 'chatgpt')
df_windows_real_chatgpt <- process_data("chatgpt/windows11-real-chatgpt.RData", 'windows', 'real', 'chatgpt')
df_windows_generation_bard <- process_data("bard/windows11-generation-bard.RData", 'windows', 'generation', 'bard')
df_windows_knowledge_bard <- process_data("bard/windows11-knowledge-bard.RData", 'windows', 'knowledge', 'bard')
df_windows_real_bard <- process_data("bard/windows11-real-bard.RData", 'windows', 'real', 'bard')
df_windows_generation_llama <- process_data("llama/windows11-generation-llama.RData", 'windows', 'generation', 'llama')
df_windows_knowledge_llama <- process_data("llama/windows11-knowledge-llama.RData", 'windows', 'knowledge', 'llama')
df_windows_real_llama <- process_data("llama/windows11-real-llama.RData", 'windows', 'real', 'llama')
# Summary statistics
summary(df_linux_generation_chatgpt$power)
# Raw visualization
hist(df_linux_generation_chatgpt$power, main="Histogram of Power Usage", xlab="Power Usage", ylab="Frequency", col="skyblue", border="black")
boxplot(df_linux_generation_chatgpt$power)
# Function to remove outliers
remove_outliers <- function(df) {
q1 <- quantile(df[['power']], 0.25)
q3 <- quantile(df[['power']], 0.75)
iqr <- q3 - q1
lower_threshold <- q1 - 1.5 * iqr
upper_threshold <- q3 + 1.5 * iqr
df_filtered <- df[df[['power']] >= lower_threshold & df[['power']] <= upper_threshold, ]
return(df_filtered)
}
df_linux_generation_chatgpt <- remove_outliers(df_linux_generation_chatgpt)
df_linux_knowledge_chatgpt <- remove_outliers(df_linux_knowledge_chatgpt)
df_linux_real_chatgpt <- remove_outliers(df_linux_real_chatgpt)
df_linux_generation_bard <- remove_outliers(df_linux_generation_bard)
df_linux_knowledge_bard <- remove_outliers(df_linux_knowledge_bard)
df_linux_real_bard <- remove_outliers(df_linux_real_bard)
df_linux_generation_llama <- remove_outliers(df_linux_generation_llama)
df_linux_knowledge_llama <- remove_outliers(df_linux_knowledge_llama)
df_linux_real_llama <- remove_outliers(df_linux_real_llama)
df_m2_gneration_chatgpt <- remove_outliers(df_m2_generation_chatgpt)
df_m2_knowledge_chatgpt <- remove_outliers(df_m2_knowledge_chatgpt)
df_m2_real_chatgpt <- remove_outliers(df_m2_real_chatgpt)
df_m2_generation_bard <- remove_outliers(df_m2_generation_bard)
df_m2_knowledge_bard <- remove_outliers(df_m2_knowledge_bard)
df_m2_real_bard <- remove_outliers(df_m2_real_bard)
df_m2_generation_llama <- remove_outliers(df_m2_generation_llama)
df_m2_knowledge_llama <- remove_outliers(df_m2_knowledge_llama)
df_m2_real_llama <- remove_outliers(df_m2_real_llama)
df_windows_gneration_chatgpt <- remove_outliers(df_windows_generation_chatgpt)
df_windows_knowledge_chatgpt <- remove_outliers(df_windows_knowledge_chatgpt)
df_windows_real_chatgpt <- remove_outliers(df_windows_real_chatgpt)
df_windows_generation_bard <- remove_outliers(df_windows_generation_bard)
df_windows_knowledge_bard <- remove_outliers(df_windows_knowledge_bard)
df_windows_real_bard <- remove_outliers(df_windows_real_bard)
df_windows_generation_llama <- remove_outliers(df_windows_generation_llama)
df_windows_knowledge_llama <- remove_outliers(df_windows_knowledge_llama)
df_windows_real_llama <- remove_outliers(df_windows_real_llama)
# Plotting
# Example: Boxplot for Linux-Generation
boxplot(df_linux_generation_chatgpt$power, main="Linux-Generation", ylab="Power")
hist(df_linux_generation_chatgpt$power, main="Histogram of Power Usage", xlab="Power Usage", ylab="Frequency", col="skyblue", border="black")
# You can create similar plots for other dataframes.
boxplot(df_m2_real_llama$power, main="M2-Real World", ylab="Power")
# Save the boxplot as a PNG file
png("visualization/linux-generation-boxplot.png")
boxplot(df_linux_generation_chatgpt$power, main="Linux-Generation", ylab="Power")
dev.off()  # Close the PNG device
# Create the boxplot
boxplot(list(df_linux_generation_chatgpt$power,
df_linux_generation_bard$power,
df_linux_generation_llama$power),
main="Linux-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power"
)
# Save the boxplot as a PNG file
png("visualization/linux-generation-boxplot.png")
# Close the PNG device
dev.off()
# Linux-Knowledge
boxplot(list(df_linux_knowledge_chatgpt$power,
df_linux_knowledge_bard$power,
df_linux_knowledge_llama$power),
main="Linux-Knowledge", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("visualization/linux-knowledge-boxplot.png")
# Close the PNG device
dev.off()
# Additional plots (modify as needed)
ggplot(df_linux_generation_chatgpt, aes(x = llm, y = power)) +
geom_point(aes(color = llm), size = 3) +
geom_text(aes(label = llm), vjust = 1.5, hjust = 1.5) +
labs(title = "Average power of LLM interaction per LLM by operating system.",
x = "Machine Type",
y = "Power Usage (Watts)") +
theme_minimal()
# Boxplot: Linux-Generation
boxplot(list(df_linux_generation_chatgpt$power,
df_linux_generation_bard$power,
df_linux_generation_llama$power),
main="Linux-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power"
)
# Save the boxplot as a PNG file
png("visualization/linux-generation-boxplot.png")
setwd("~/Documents/SE4GD/VU/Green Lab/Green-Code-Guardians/data")
# Install the required packages (if not already installed)
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
# Load the necessary libraries
library(tidyverse)
# Function to process data
process_data <- function(filename, machine, promptType, llm) {
load(filename)
sample <- counter_data$sampleGroups[[1]]$samples
colnames(sample)[colnames(sample) == "count"] <- "powerUsage"
# Create a data frame
df <- data.frame(
time = sample$time,
power = sample$powerUsage,
machine = factor(rep(machine, length(sample$time))),
promptType = factor(rep(promptType, length(sample$time))),
llm = factor(rep(llm, length(sample$time)))
)
# Rename columns
colnames(df) <- c('time', 'power', 'machine', 'prompt', 'llm')
return(df)
}
# Load and process the data
df_linux_generation_chatgpt <- process_data("chatgpt/linux-generation-chatgpt.RData", 'linux', 'generation', 'chatgpt')
df_linux_knowledge_chatgpt <- process_data("chatgpt/linux-knowledge-chatgpt.RData", 'linux', 'knowledge', 'chatgpt')
df_linux_real_chatgpt <- process_data("chatgpt/linux-real-chatgpt.RData", 'linux', 'real', 'chatgpt')
df_linux_generation_bard <- process_data("bard/linux-generation-bard.RData", 'linux', 'generation', 'bard')
df_linux_knowledge_bard <- process_data("bard/linux-knowledge-bard.RData", 'linux', 'knowledge', 'bard')
df_linux_real_bard <- process_data("bard/linux-real-bard.RData", 'linux', 'real', 'bard')
df_linux_generation_llama <- process_data("llama/linux-generation-llama.RData", 'linux', 'generation', 'llama')
df_linux_knowledge_llama <- process_data("llama/linux-knowledge-llama.RData", 'linux', 'knowledge', 'llama')
df_linux_real_llama <- process_data("llama/linux-real-llama.RData", 'linux', 'real', 'llama')
df_m2_generation_chatgpt <- process_data("chatgpt/m2-generation-chatGPT.RData", 'm2', 'generation', 'chatgpt')
df_m2_knowledge_chatgpt <- process_data("chatgpt/m2-knowledge-chatGPT.RData", 'm2', 'knowledge', 'chatgpt')
df_m2_real_chatgpt <- process_data("chatgpt/m2-realWorld-chatGPT.RData", 'm2', 'real', 'chatgpt')
df_m2_generation_bard <- process_data("bard/m2-generation-bard.RData", 'm2', 'generation', 'bard')
df_m2_knowledge_bard <- process_data("bard/m2-knowledge-bard.RData", 'm2', 'knowledge', 'bard')
df_m2_real_bard <- process_data("bard/m2-realWorld-bard.RData", 'm2', 'real', 'bard')
df_m2_generation_llama <- process_data("llama/m2-generation-llama2.RData", 'm2', 'generation', 'llama')
df_m2_knowledge_llama <- process_data("llama/m2-knowledge-llama2.RData", 'm2', 'knowledge', 'llama')
df_m2_real_llama <- process_data("llama/m2-realworld-llama2.RData", 'm2', 'real', 'llama')
df_windows_generation_chatgpt <- process_data("chatgpt/windows11-generation-chatgpt.RData", 'windows', 'generation', 'chatgpt')
df_windows_knowledge_chatgpt <- process_data("chatgpt/windows11-knowledge-chatgpt.RData", 'windows', 'knowledge', 'chatgpt')
df_windows_real_chatgpt <- process_data("chatgpt/windows11-real-chatgpt.RData", 'windows', 'real', 'chatgpt')
df_windows_generation_bard <- process_data("bard/windows11-generation-bard.RData", 'windows', 'generation', 'bard')
df_windows_knowledge_bard <- process_data("bard/windows11-knowledge-bard.RData", 'windows', 'knowledge', 'bard')
df_windows_real_bard <- process_data("bard/windows11-real-bard.RData", 'windows', 'real', 'bard')
df_windows_generation_llama <- process_data("llama/windows11-generation-llama.RData", 'windows', 'generation', 'llama')
df_windows_knowledge_llama <- process_data("llama/windows11-knowledge-llama.RData", 'windows', 'knowledge', 'llama')
df_windows_real_llama <- process_data("llama/windows11-real-llama.RData", 'windows', 'real', 'llama')
# Summary statistics
summary(df_linux_generation_chatgpt$power)
# Raw visualization
hist(df_linux_generation_chatgpt$power, main="Histogram of Power Usage", xlab="Power Usage", ylab="Frequency", col="skyblue", border="black")
boxplot(df_linux_generation_chatgpt$power)
# Function to remove outliers
remove_outliers <- function(df) {
q1 <- quantile(df[['power']], 0.25)
q3 <- quantile(df[['power']], 0.75)
iqr <- q3 - q1
lower_threshold <- q1 - 1.5 * iqr
upper_threshold <- q3 + 1.5 * iqr
df_filtered <- df[df[['power']] >= lower_threshold & df[['power']] <= upper_threshold, ]
return(df_filtered)
}
df_linux_generation_chatgpt <- remove_outliers(df_linux_generation_chatgpt)
df_linux_knowledge_chatgpt <- remove_outliers(df_linux_knowledge_chatgpt)
df_linux_real_chatgpt <- remove_outliers(df_linux_real_chatgpt)
df_linux_generation_bard <- remove_outliers(df_linux_generation_bard)
df_linux_knowledge_bard <- remove_outliers(df_linux_knowledge_bard)
df_linux_real_bard <- remove_outliers(df_linux_real_bard)
df_linux_generation_llama <- remove_outliers(df_linux_generation_llama)
df_linux_knowledge_llama <- remove_outliers(df_linux_knowledge_llama)
df_linux_real_llama <- remove_outliers(df_linux_real_llama)
df_m2_gneration_chatgpt <- remove_outliers(df_m2_generation_chatgpt)
df_m2_knowledge_chatgpt <- remove_outliers(df_m2_knowledge_chatgpt)
df_m2_real_chatgpt <- remove_outliers(df_m2_real_chatgpt)
df_m2_generation_bard <- remove_outliers(df_m2_generation_bard)
df_m2_knowledge_bard <- remove_outliers(df_m2_knowledge_bard)
df_m2_real_bard <- remove_outliers(df_m2_real_bard)
df_m2_generation_llama <- remove_outliers(df_m2_generation_llama)
df_m2_knowledge_llama <- remove_outliers(df_m2_knowledge_llama)
df_m2_real_llama <- remove_outliers(df_m2_real_llama)
df_windows_gneration_chatgpt <- remove_outliers(df_windows_generation_chatgpt)
df_windows_knowledge_chatgpt <- remove_outliers(df_windows_knowledge_chatgpt)
df_windows_real_chatgpt <- remove_outliers(df_windows_real_chatgpt)
df_windows_generation_bard <- remove_outliers(df_windows_generation_bard)
df_windows_knowledge_bard <- remove_outliers(df_windows_knowledge_bard)
df_windows_real_bard <- remove_outliers(df_windows_real_bard)
df_windows_generation_llama <- remove_outliers(df_windows_generation_llama)
df_windows_knowledge_llama <- remove_outliers(df_windows_knowledge_llama)
df_windows_real_llama <- remove_outliers(df_windows_real_llama)
# Plotting
# Example: Boxplot for Linux-Generation
boxplot(df_linux_generation_chatgpt$power, main="Linux-Generation", ylab="Power")
hist(df_linux_generation_chatgpt$power, main="Histogram of Power Usage", xlab="Power Usage", ylab="Frequency", col="skyblue", border="black")
# You can create similar plots for other dataframes.
boxplot(df_m2_real_llama$power, main="M2-Real World", ylab="Power")
# Save the boxplot as a PNG file
png("visualization/linux-generation-boxplot.png")
boxplot(df_linux_generation_chatgpt$power, main="Linux-Generation", ylab="Power")
dev.off()  # Close the PNG device
# Boxplot: Linux-Generation
boxplot(list(df_linux_generation_chatgpt$power,
df_linux_generation_bard$power,
df_linux_generation_llama$power),
main="Linux-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power"
)
# Save the boxplot as a PNG file
png("visualization/linux-generation-boxplot.png")
# Close the PNG device
dev.off()
# Linux-Knowledge
boxplot(list(df_linux_knowledge_chatgpt$power,
df_linux_knowledge_bard$power,
df_linux_knowledge_llama$power),
main="Linux-Knowledge", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("visualization/linux-knowledge-boxplot.png")
# Close the PNG device
dev.off()
# Linux-Real
boxplot(list(df_linux_real_chatgpt$power,
df_linux_real_bard$power,
df_linux_real_llama$power),
main="Linux-Real", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("visualization/linux-real-boxplot.png")
# Close the PNG device
dev.off()
# M2-Generation
boxplot(list(df_m2_generation_chatgpt$power,
df_m2_generation_bard$power,
df_m2_generation_llama$power),
main="M2-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("visualization/linux-knowledge-boxplot.png")
# Close the PNG device
dev.off()
# M2-Knowledge
boxplot(list(df_m2_knowledge_chatgpt$power,
df_m2_knowledge_bard$power,
df_m2_knowledge_llama$power),
main="M2-Knowledge", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("visualization/linux-knowledge-boxplot.png")
# Close the PNG device
dev.off()
# M2-Real
boxplot(list(df_m2_real_chatgpt$power,
df_m2_real_bard$power,
df_m2_real_llama$power),
main="M2-Real", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("visualization/m2-real-boxplot.png")
# Close the PNG device
dev.off()
# Windows-Generation
boxplot(list(df_windows_generation_chatgpt$power,
df_windows_generation_bard$power,
df_windows_generation_llama$power),
main="Windows-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("visualization/windows-generation-boxplot.png")
# Close the PNG device
dev.off()
# Windows-Knowledge
boxplot(list(df_windows_knowledge_chatgpt$power,
df_windows_knowledge_bard$power,
df_windows_knowledge_llama$power),
main="Windows-Knowledge", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("visualization/windows-knowledge-boxplot.png")
# Close the PNG device
dev.off()
# Windows-Real
boxplot(list(df_windows_real_chatgpt$power,
df_windows_real_bard$power,
df_windows_real_llama$power),
main="Windows-Real", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
png("figures/windows-real-boxplot.png")
# Close the PNG device
dev.off()
# Additional plots (modify as needed)
ggplot(df_linux_generation_chatgpt, aes(x = llm, y = power)) +
geom_point(aes(color = llm), size = 3) +
geom_text(aes(label = llm), vjust = 1.5, hjust = 1.5) +
labs(title = "Average power of LLM interaction per LLM by operating system.",
x = "Machine Type",
y = "Power Usage (Watts)") +
theme_minimal()
# Boxplot: Linux-Generation
boxplot(list(df_linux_generation_chatgpt$power,
df_linux_generation_bard$power,
df_linux_generation_llama$power),
main="Linux-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power"
)
# Save the boxplot as a PNG file
png("data/visualization/linux-generation-boxplot.png")
# Close the PNG device
dev.off()
# Boxplot: Linux-Generation
boxplot(list(df_linux_generation_chatgpt$power,
df_linux_generation_bard$power,
df_linux_generation_llama$power),
main="Linux-Generation", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power"
)
# Save the boxplot as a PNG file
png("data/visualization/linux-generation-boxplot.png")
# Close the PNG device
dev.off()
# Linux-Knowledge
boxplot(list(df_linux_knowledge_chatgpt$power,
df_linux_knowledge_bard$power,
df_linux_knowledge_llama$power),
main="Linux-Knowledge", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("linux-knowledge-boxplot.png")
# Close the PNG device
dev.off()
# Linux-Real
boxplot(list(df_linux_real_chatgpt$power,
df_linux_real_bard$power,
df_linux_real_llama$power),
main="Linux-Real", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("linux-real-boxplot.png")
# Linux-Real
boxplot(list(df_linux_real_chatgpt$power,
df_linux_real_bard$power,
df_linux_real_llama$power),
main="Linux-Real", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("linux-real-boxplot.png")
# Close the PNG device
dev.off()
setwd("~/Documents/SE4GD/VU/Green Lab/Green-Code-Guardians/data")
# Linux-Real
boxplot(list(df_linux_real_chatgpt$power,
df_linux_real_bard$power,
df_linux_real_llama$power),
main="Linux-Real", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("~/Documents/SE4GD/VU/Green Lab/Green-Code-Guardians/data/linux-real-boxplot.png")
# Close the PNG device
dev.off()
# Linux-Real
boxplot(list(df_linux_real_chatgpt$power,
df_linux_real_bard$power,
df_linux_real_llama$power),
main="Linux-Real", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("~/Documents/SE4GD/VU/Green Lab/Green-Code-Guardians/data/linux-real-boxplot.png",width = 800, height = 600)
# Close the PNG device
dev.off()
# Linux-Real
boxplot(list(df_linux_real_chatgpt$power,
df_linux_real_bard$power,
df_linux_real_llama$power),
main="Linux-Real", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("~/Documents/SE4GD/VU/Green Lab/Green-Code-Guardians/data/linux-real-boxplot.png",width = 800, height = 600)
# Close the PNG device
dev.off()
# Linux-Real
boxplot(list(df_linux_real_chatgpt$power,
df_linux_real_bard$power,
df_linux_real_llama$power),
main="Linux-Real", names=c("ChatGPT", "Bard", "Llama2"),
ylab="Power")
# Save the boxplot as a PNG file
png("~/Documents/SE4GD/VU/Green Lab/Green-Code-Guardians/data/linux-real-boxplot.png",width = 800, height = 600,type = "cairo-png")
# Close the PNG device
dev.off()
